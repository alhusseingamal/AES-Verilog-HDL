/*
----------------- AES -----------------
- Fixed Block size : 128 bits (16 bytes)

- Different Key sizez : 128, 192 or 256 bits



Algorithm:


- We take as an input a plaintext block of 128 bits and a key of size M, where M can be 128, 192 or 256 bits

- The initial transformation (call it round 0), called AddRoundKey, is just an XOR operation between the plaintext block and the key  

- After that, we have N rounds, where in N-1 of them we have 4 transformations:

    - SubBytes
    - ShiftRows
    - MixColumns
    - AddRoundKey

- Note: SubBytes and ShiftRows are commutative, so the order of their application doesn't matter

- In the final (Nth) round, we have only 3 transformations:

        - SubBytes
        - ShiftRows
        - AddRoundKey

- For each of the rounds, we have a different key, which is derived from the original key

- The process of deriving/generating the keys is called KeyExpansion.

- The size of the key for each round is 128 bits, regardless of M, the size of the original key

- The output of the final round is the ciphertext block of 128 bits

- There is a relation between the key size M, the number of rounds N
    - For M = 128, N = 10
    - For M = 192, N = 12
    - For M = 256, N = 14

- The KeyExpansion algorithm generates RoundKeys for each round, including the initial RoundKey 
    that is used in the initial transformation.

- The KeyExpansion algorithm is based on the Rijndael key schedule, which is a series of transformations that generate the RoundKeys

- The Decryption algorithm uses the inverse transformations of the forward transformations, in reverse order

- The Decryption algorithm uses the same RoundKeys as the Encryption algorithm, but in reverse order
    Example: The 0th RoundKey of the Encryption algorithm is the Nth RoundKey of the Decryption algorithm
    Example: The 1st RoundKey of the Encryption algorithm is the N-1th RoundKey of the Decryption algorithm



- The SubBytes transformation is a non-linear byte substitution that operates on each byte of the block independently

- The ShiftRows transformation shifts the rows of the block cyclically to the left

- The MixColumns transformation operates on the columns of the block, treating each column as a polynomial over GF(2^8), and multiplying it by a fixed polynomial modulo another fixed polynomial

- The AddRoundKey transformation is just an XOR operation between the block and the RoundKey

- The SubBytes transformation uses a fixed S-box, which is a 16x16 table that maps each byte to another byte

- The ShiftRows transformation shifts the rows of the block by different offsets, so that the first row is not shifted, the second row is shifted by 1 byte, the third row is shifted by 2 bytes, and the fourth row is shifted by 3 bytes

- The MixColumns transformation is a linear transformation that operates on the columns of the block, treating each column as a polynomial over GF(2^8), and multiplying it by a fixed polynomial modulo another fixed polynomial

*/



/*
Notes:
- The AES algorithm is a symmetric block cipher that encrypts and decrypts data in 128-bit blocks.
- The algorithm uses a key schedule to generate a series of round keys from an initial key.
- The key schedule is generated using the KeyExpansion() function, which produces a linear array of 4-byte words.
- The key schedule consists of Nb(Nr+1) words, where Nb is the number of columns in the state array and Nr is the number of rounds.
- The key schedule is used to generate round keys for each round of the encryption process.
- The SubWord() function applies the S-Box to each byte of a 4-byte word.
- The RotWord() function performs a one-byte circular left shift on a word.
- The Rcon array contains the values of the round constant word array, which is used in the key schedule.
- The key schedule is generated by copying the initial key into the first Nk words, where Nk is the number of columns in the key.
- Each subsequent word in the key schedule is generated by XORing the previous word with the word Nk positions before it.
- For words in positions that are multiples of Nk, a transformation is applied to the previous word before the XOR operation.
- The transformation consists of a cyclic shift of the bytes in the word followed by a table lookup using the SubWord() function.
- The round constant Rcon[i] is XORed with the transformed word to generate the next word in the key schedule.

AES (Advanced Encryption Standard) is an encryption standard that can be implemented in both hardware and software.

In a software implementation, the AES algorithm is written in a high-level programming language and executed on
a general-purpose processor. This is typically slower but more flexible, as the software can be easily updated or changed.

In a hardware implementation, the AES algorithm is designed as a digital circuit and fabricated on a chip.
This can be much faster and more secure than a software implementation, but it's also more difficult to update or change.


- Notation:
    Nb = Number 32-bit words in the block of data
    Nk = Number of 32-bit words in the Cipher Key
    Nr = Number of rounds



- For the AES algorithm, the length of the input block, the output block and the State is 128 bits.
    This is represented by Nb = 4, which reflects the number of 32-bit words (number of columns) in the State.
    The State is a 4x4 matrix of bytes, where each element is a byte.

- The length of the Cipher Key, K, is 128, 192, or 256 bits.
- The key length is denoted as Nk, where Nk = 4, 6, or 8 for 128, 192, or 256-bit keys, respectively.
    It reflects the number of 32-bit words (number of columns) in the Cipher Key.

- The number of rounds, Nr, is determined by the key length => Nr = function(Nk):
    - Nr = 10 for 128-bit keys (Nk = 4)
    - Nr = 12 for 192-bit keys (Nk = 6)
    - Nr = 14 for 256-bit keys (Nk = 8)

In summary:
Key-Block-Round Combinations:
            Nk      Nb      Nr
AES-128:    4       4       10
AES-192:    6       4       12
AES-256:    8       4       14


- The AES algorithm consists of several steps:
    1. KeyExpansion(): generates the key schedule from the initial key.
    2. AddRoundKey(): XORs the State with a round key.
    3. SubBytes(): substitutes each byte of the State with a corresponding byte from an S-Box.
    4. ShiftRows(): shifts the rows of the State cyclically.
    5. MixColumns(): mixes the columns of the State.
    6. The final round omits the MixColumns() step.



// For the case of Key size = 128 bits, this is 44 words of 32 bits each = 1408 bits
*/